---
# Generated by boilr at {{ time "Mon, 02 Jan 2006 15:04:05 MST" }}
apiVersion: "extensions/v1beta1"
kind: "DaemonSet"
metadata:
  name: "{{ ApplicationName }}"
  labels:
    application: "{{ ApplicationName | toLower }}"
    role: "{{ ApplicationRole | toLower }}"
    # DaemonSets aren't managed like other resources by a deployment, so version bumps won't be automatically
    # propigated. Thus, we're creating a specific version note here. This note won't be used by the selector
    version: "{{ ApplicationVersion | toLower }}"
spec:
  template:
    metadata:
      labels:
        application: "{{ ApplicationName | toLower }}"
        role: "{{ ApplicationRole | toLower }}"
        version: "{{ ApplicationVersion | toLower }}"
    spec:
      # volumes:
      # - name: "{{ Service | toLower }}-etc-conf-d"
      # configMap:
      #   name: "{{ Service | toLower }}-etc-conf-d"
      # - name: "{{ Service | toLower }}-data"
      #   hostPath:
      #     path: /data/{{ Service | toLower }}/{{ if eq UseHostNetwork "true" }}
      hostNetwork: true{{end}}{{ if eq UseHostPid "true" }}
      hostPID: true{{end}}
      containers:
      - name: "{{ ApplicationName | toLower }}"
        # env:
        # - name: "FOO"
        #   value: "BAR"
        image: "{{ Image }}:{{ ImageVersion }}" # Todo: Update this
        {{ if eq ImageVersion "latest" }}imagePullPolicy: "Always"{{ else }}imagePullPolicy: "IfNotPresent"{{ end }}
        # args:
        #   - "command"
        #   - "line"
        #   - "arguments"
        ports:
        - containerPort: {{ ApplicationPort }}
          protocol: "{{ ApplicationPortProtocol }}"{{ if eq UseHostNetwork "true" }}
          hostPort: {{ ApplicationPort }}{{ end }}
          name: "{{ ApplicationPortName }}"
        # volumeMounts:
        # - name: "{{ Service | toLower }}-etc-conf-d"
        #   readOnly: true
        #   mountPath: "/etc/{{ Service | toLower }}/conf.d"
        # - name: "{{ Service | toLower }}-data
        #   readOnly: false
        #   mountPath: "/data"
        livenessProbe:
          {{ if eq ProbeType "http" }}httpGet:
            # Path to probe; should be cheap, but representative of typical behavior
            path: "/healthz"
            port: {{ ApplicationPort }}
            httpHeaders:
              - name: "Host"
                value: "www.example.com" # Todo: Fix this
              #- name: "X-Custom-Header"
              #  value: "Awesome"
          initialDelaySeconds: {{ ApplicationBootTime }}
          timeoutSeconds: {{ ApplicationHealthCheckPeriod }}{{ else if eq ProbeType "tcp"}}tcpSocket:
            port: {{ ApplicationPort }}
          initialDelaySeconds: {{ ApplicationBootTime }}
          timeoutSeconds: {{ ApplicationHealthCheckPeriod }}{{ end }}
        readinessProbe:
          {{ if eq ProbeType "http" }}httpGet:
            # Path to probe; akin to a status check.
            path: "/healthz"
            port: {{ ApplicationPort }}
            httpHeaders:
              - name: "Host"
                value: "www.example.com" # Todo: Fix this
              #- name: "X-Custom-Header"
              #  value: "Awesome"
          initialDelaySeconds: {{ ApplicationBootTime }}
          timeoutSeconds: {{ ApplicationHealthCheckPeriod }}{{ else if eq ProbeType "tcp"}}tcpSocket:
            port: {{ ApplicationPort }}
          initialDelaySeconds: {{ ApplicationBootTime }}
          timeoutSeconds: {{ ApplicationHealthCheckPeriod }}{{ end }}
      restartPolicy: "Always"
      securityContext: {}
